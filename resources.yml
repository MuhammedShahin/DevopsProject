Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
    Type: String

  VpcCIDRBlock:
    Type: String

  FirstPublicSubnetCIDR:
    Type: String
  
  SecondPublicSubnetCIDR:
    Type: String
  
  FirstPrivateSubnetCIDR:
    Type: String
  
  SecondPrivateSubnetCIDR:
    Type: String
  
  WildCardAddress:
    Type: String
  
Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  
  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties: 
  #     Roles:
  #       - UdacityS3ReadOnlyEC2
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDRBlock
      EnableDnsHostnames: true
      Tags:
        - Key: name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  FirstPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref FirstPublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} Public Subnet AZ1
  
  SecondPublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Ref SecondPublicSubnetCIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: name
            Value: !Sub ${EnvironmentName} Public Subnet AZ2
  
  FirstPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref FirstPrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} Private Subnet AZ1

  SecondPrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Ref SecondPrivateSubnetCIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: name
            Value: !Sub ${EnvironmentName} Private Subnet AZ2
  
  FirstEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  
  SecondEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  FirstNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt FirstEIP.AllocationId
      SubnetId: !Ref FirstPublicSubnet

  SecondNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt SecondEIP.AllocationId
      SubnetId: !Ref SecondPublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} Public Routes
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref WildCardAddress
      GatewayId: !Ref InternetGateway

  FirstPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref FirstPublicSubnet

  SecondPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SecondPublicSubnet
  
  FirstPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} Private Routes AZ1
  
  FirstPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref FirstPrivateRouteTable
      DestinationCidrBlock: !Ref WildCardAddress
      NatGatewayId: !Ref FirstNatGateway
  
  SecondPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FirstPrivateRouteTable
      SubnetId: !Ref FirstPrivateSubnet
  
  SecondPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} Private Routes AZ2
  
  SecondPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SecondPrivateRouteTable
      DestinationCidrBlock: !Ref WildCardAddress
      NatGatewayId: !Ref SecondNatGateway
  
  SecondPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SecondPrivateRouteTable
      SubnetId: !Ref SecondPrivateSubnet

  
# Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html


# This comment to test git.